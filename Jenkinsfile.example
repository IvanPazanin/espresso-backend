pipeline {
    agent any

    environment {
        // Build Environment
        
        BASE_APP_VERSION = '20.4.1'
        // Create a formatted version number
        APP_VERSION = VersionNumber(projectStartDate: '1970-01-01', versionNumberString: BASE_APP_VERSION+'.${BUILDS_ALL_TIME}', versionPrefix: '', worstResultForIncrement: 'SUCCESS')
        SONAR_QUBE_PROJECT_KEY = 'NDDP_SRS_MANAGER'
        SONAR_QUBE_ENV = 'sonarqube.lmera.ericsson.se'
        SONAR_SCANNER_FOR_MSBUILD = 'SonarScanner for MSBuild'

        MSBUILD = 'MSBuild-default'
        MSBUILD_CONFIG = 'Test'
        MSBUILD_PUBLISH_PROFILE = 'srs-test - Web Deploy'
        MSBUILD_SOLUTION_FILE_PATH = '.\\Srs\\Srs.sln'

        EMAIL_FROM = 'srs-jenkins@no-reply.ericsson.net'
        GROUP_EMAIL = 'PDLSRSNDDP@pdl.internal.ericsson.com'

        CURRENT_BRANCH = 'master'
        IS_FEATURE_BRANCH = false

    }

    stages {
        // Run if not in multibranch pipeline (env.BRANCH_NAME is then null or empty)
        stage('Checkout SCM') {
            when { not { expression { env.BRANCH_NAME } } }
            steps {

                // Source Code Management
                git branch: "${CURRENT_BRANCH}",  credentialsId: '083fdd38-9d9a-4e39-98b9-92c5b822eca2', url: 'ssh://git@bitbucket.platform.dev.sdt.ericsson.se:7999/srs/smartrolloutsupport-manager.git'

            }

        }

        stage('Init') {
            steps {

                // Use the formatted version number for build display name
                script {
                    currentBuild.displayName = "${APP_VERSION}"
                    //currentBuild.description = "Some description"    
                }

                // Define configuration and publish profile for build
                script {
                    if (env.BRANCH_NAME == 'master') {
                        MSBUILD_CONFIG = "Test"
                        MSBUILD_PUBLISH_PROFILE = "srs-test - Web Deploy"
                        CURRENT_BRANCH = env.BRANCH_NAME
                        IS_FEATURE_BRANCH = false
                    } else if (env.BRANCH_NAME == 'demo'){
                        MSBUILD_CONFIG = "Demo"
                        MSBUILD_PUBLISH_PROFILE = "srs-demo - Web Deploy"
                        CURRENT_BRANCH = env.BRANCH_NAME
                        IS_FEATURE_BRANCH = false
                    } else if (env.BRANCH_NAME == 'Rina17_2'){
                        MSBUILD_CONFIG = "Rina"
                        //MSBUILD_PUBLISH_PROFILE = "srs-i - Web Deploy"    // Use default one for now
                        CURRENT_BRANCH = env.BRANCH_NAME
                        IS_FEATURE_BRANCH = false
                    } else if (env.BRANCH_NAME == 'prod'){
                        MSBUILD_CONFIG = "Prod"
                        //MSBUILD_PUBLISH_PROFILE = "srs-prod - Web Deploy"    // Use default one for now
                        CURRENT_BRANCH = env.BRANCH_NAME
                        IS_FEATURE_BRANCH = false
                    } else if(env.BRANCH_NAME){
                        CURRENT_BRANCH = env.BRANCH_NAME
                        IS_FEATURE_BRANCH = true
                    }
                }

            }

        }

        stage('Build') {
            steps {

                // Editable Email Notification
                script {
                    if(IS_FEATURE_BRANCH) {
                        emailext from: EMAIL_FROM, to: '${DEFAULT_RECIPIENTS}', replyTo: '$DEFAULT_REPLYTO', mimeType: 'text/html; charset=UTF-8', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}', postsendScript: '${DEFAULT_POSTSEND_SCRIPT}', presendScript: '${DEFAULT_PRESEND_SCRIPT}', recipientProviders: [developers(), requestor(), upstreamDevelopers()]
                    } else {
                        emailext from: EMAIL_FROM, to: '${DEFAULT_RECIPIENTS}; '+GROUP_EMAIL, replyTo: '$DEFAULT_REPLYTO', mimeType: 'text/html; charset=UTF-8', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}', postsendScript: '${DEFAULT_POSTSEND_SCRIPT}', presendScript: '${DEFAULT_PRESEND_SCRIPT}', recipientProviders: [developers(), requestor(), upstreamDevelopers()]
                    }
                }
                
                
                // Change Assembly Version
                changeAsmVer assemblyCompany: 'Ericsson', assemblyCopyright: 'Ericsson', assemblyCulture: '', assemblyDescription: '', assemblyFile: '', assemblyProduct: '', assemblyTitle: 'SRS Manager', assemblyTrademark: '', regexPattern: '', replacementPattern: '', versionPattern: "${APP_VERSION}"

                // Execute Windows batch command
                // Restore solution packages
                bat label: 'Restore solution packages', script: "..\\_tools\\nuget restore ${MSBUILD_SOLUTION_FILE_PATH}"

                // SonarScanner for MSBuild - Begin Analysis
                withSonarQubeEnv(env.SONAR_QUBE_ENV) {
                    bat "\"${tool env.SONAR_SCANNER_FOR_MSBUILD}\"\\SonarQube.Scanner.MSBuild.exe begin /k:\"${SONAR_QUBE_PROJECT_KEY}\" /v:\"${APP_VERSION}\" /d:sonar.branch.name=${CURRENT_BRANCH}"
                }

                // Build a Visual Studio project or solution using MSBuild
                bat label: 'Build a Visual Studio project or solution using MSBuild', script: "\"${tool env.MSBUILD}\" ${MSBUILD_SOLUTION_FILE_PATH} /T:restore;Clean;Build /p:Configuration=${MSBUILD_CONFIG} /p:DebugSymbols=true"

            }
        }

        stage('Test') {
            steps {
                // Execute Windows batch command
                // Clear Test Results
                bat label: 'Clear Test Results', script: """
                    rem Clear TestResults folder
                    IF EXIST TestResults rmdir "TestResults" /S /Q
                """

                // Run unit tests with VSTest.console
                vsTest testFiles: """Srs/Srs.MVC.Tests/bin/${MSBUILD_CONFIG}/Srs.MVC.Tests.dll
                    Srs/Srs.Common.Tests/bin/${MSBUILD_CONFIG}/Srs.Common.Tests.dll
                    Srs/Srs.DAL.Tests/bin/${MSBUILD_CONFIG}/Srs.DAL.Tests.dll
                    Srs/Srs.Logic.Tests/bin/${MSBUILD_CONFIG}/Srs.Logic.Tests.dll
                    Srs/Srs.Reports.Tests/bin/${MSBUILD_CONFIG}/Srs.Reports.Tests.dll
                """

                // Code coverage - OpenCover
                
                // Execute Windows batch command
                // Create outputCoverage.xml
                bat label: 'Create OpenCover file', script: "\"%ProgramFiles(x86)%\\Jenkins\\workspace\\_tools\\opencover.4.7.922\\tools\\OpenCover.Console.exe\" -output:outputCoverage.xml -register:path32 -target:\"%ProgramFiles(x86)%\\Jenkins\\workspace\\_tools\\microsoft.testplatform.16.1.1\\tools\\net451\\Common7\\IDE\\Extensions\\TestPlatform\\vstest.console.exe\" -targetargs:\"Srs/Srs.MVC.Tests/bin/${MSBUILD_CONFIG}/Srs.MVC.Tests.dll Srs/Srs.Common.Tests/bin/${MSBUILD_CONFIG}/Srs.Common.Tests.dll Srs/Srs.DAL.Tests/bin/${MSBUILD_CONFIG}/Srs.DAL.Tests.dll Srs/Srs.Logic.Tests/bin/${MSBUILD_CONFIG}/Srs.Logic.Tests.dll Srs/Srs.Reports.Tests/bin/${MSBUILD_CONFIG}/Srs.Reports.Tests.dll\" -filter:\"+[Srs.*]* -[Srs.DAL]Srs.DAL.Migrations.* -[*.Tests*]* -[*]*.Global -[*]*.RouteConfig -[*]*.WebApiConfig\" -skipautoprops"

                // Execute Windows batch command
                // Convert OpenCover to Cobertura
                bat label: 'Convert OpenCover to Cobertura', script: '"%ProgramFiles(x86)%\\Jenkins\\workspace\\_tools\\opencovertocoberturaconverter.0.3.4\\tools\\OpenCoverToCoberturaConverter.exe" -input:outputCoverage.xml -output:outputCobertura.xml -sources:"%WORKSPACE%"'

                // Execute Windows batch command
                // Create code coverage HTML reports
                bat label: 'Create code coverage HTML reports', script: '"%ProgramFiles(x86)%\\Jenkins\\workspace\\_tools\\reportgenerator.4.1.10\\tools\\net47\\ReportGenerator.exe" -reports:outputCoverage.xml -targetDir:CodeCoverageHTML'

                // SonarScanner for MSBuild - End Analysis
                withSonarQubeEnv(env.SONAR_QUBE_ENV) {
                    bat "\"${tool env.SONAR_SCANNER_FOR_MSBUILD}\"\\SonarQube.Scanner.MSBuild.exe end"
                }

            }
            
        }

        stage('Artifacts') {
            // Only for main branches
            when { anyOf { branch 'master'; branch 'demo'; branch 'prod'; branch 'Rina17_2' } }
            steps {
                // Execute Windows batch command
                // Clear Artifacts folder
                bat label: 'Clear Artifacts folder', script: """
                        rem Clear Artifacts folder
                        IF EXIST \"%WORKSPACE%\\Artifacts\" rmdir /S /Q \"%WORKSPACE%\\Artifacts\"
                """

                // Execute Windows batch command
                // Restore Publish profiles
                bat label:'', script: "xcopy \"C:\\Program Files (x86)\\Jenkins\\workspace\\_tools\\SrsManager\\PublishProfiles\" \"${WORKSPACE}\\Srs\\Srs.MVC\\Properties\\PublishProfiles\\\" /O /X /E /H /K /Y"

                // Execute Windows batch command
                // Restore Local settings
                bat label:'', script: "xcopy \"C:\\Program Files (x86)\\Jenkins\\workspace\\_tools\\SrsManager\\LocalSettings\" \"${WORKSPACE}\\Srs\\Srs.MVC\\\" /O /X /E /H /K /Y"

                // Build a Visual Studio project or solution using MSBuild
                // Package app to file system package
                bat label: 'Build a Visual Studio project or solution using MSBuild to create file system package', script: "\"${tool env.MSBUILD}\" .\\Srs\\Srs.MVC\\Srs.Web.csproj /T:Build;WebPublish /p:Configuration=${MSBUILD_CONFIG} /p:PublishProfile=\"${MSBUILD_PUBLISH_PROFILE}\" /p:WebPublishMethod=FileSystem /p:DeleteExistingFiles=True /p:publishUrl=\"${WORKSPACE}\\Artifacts\\SrsManager_${APP_VERSION}_${MSBUILD_CONFIG}\""

                // Execute Windows batch command
                // ZIP file system package
                bat label: 'Pack File System package Artifacts', script: "\"c:\\Program Files\\7-Zip\\7z.exe\" a \"%WORKSPACE%\\Artifacts\\SrsManager_%APP_VERSION%_${MSBUILD_CONFIG}.zip\" \"%WORKSPACE%\\Artifacts\\SrsManager_%APP_VERSION%_${MSBUILD_CONFIG}\\*\""

                // Build a Visual Studio project or solution using MSBuild
                // Package app to WebDeploy package
                bat label: 'Build a Visual Studio project or solution using MSBuild to create WebDeploy package', script: "\"${tool env.MSBUILD}\" .\\Srs\\Srs.MVC\\Srs.Web.csproj /T:Build;Package /p:Configuration=${MSBUILD_CONFIG}  /p:PublishProfile=\"${MSBUILD_PUBLISH_PROFILE}\" /p:PackageLocation=\"${WORKSPACE}\\Artifacts\\SrsManager_${APP_VERSION}_${MSBUILD_CONFIG}_WebDeploy\\SrsManager_%APP_VERSION%_${MSBUILD_CONFIG}.zip\" /p:PackageAsSingleFile=True"

                // Execute Windows batch command
                // ZIP WebDeploy package
                bat label: 'Pack WebDeploy artifact', script: "\"c:\\Program Files\\7-Zip\\7z.exe\" a \"%WORKSPACE%\\Artifacts\\SrsManager_%APP_VERSION%_${MSBUILD_CONFIG}_WebDeploy.zip\" \"%WORKSPACE%\\Artifacts\\SrsManager_%APP_VERSION%_${MSBUILD_CONFIG}_WebDeploy\\*\""

                // Archive the artifacts
                archiveArtifacts 'Artifacts\\*.zip'
                
            }
        }

        // stage('Deploy') {
        //     // Only for main branches
        //     when { branch 'master' }
        //     steps {
        //         input message: 'Deploy?', ok: 'Deploy', submitter: 'user_id'
        //     }
        // }

   }

    // Post-build actions
    post {
        always {

            // Publish Cobertura Coverage Report
            cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'outputCobertura.xml', conditionalCoverageTargets: '70, 0, 0', failUnhealthy: false, failUnstable: false, lineCoverageTargets: '80, 0, 0', maxNumberOfBuilds: 0, methodCoverageTargets: '80, 0, 0', onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false

            // Publish HTML reports
            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'CodeCoverageHTML', reportFiles: 'index.htm', reportName: 'Open Coverage - Code Coverage', reportTitles: ''])

            // Publish MSTest test result report
            mstest()

            // Record compiler warnings and static analysis results
            // Static code analysis report
            recordIssues(tools: [msBuild()])
            
        }

        success {
            echo 'This will run only if successful'

            // Editable Email Notification
            script {
                if(IS_FEATURE_BRANCH) {
                    emailext from: EMAIL_FROM, to: '${DEFAULT_RECIPIENTS}', replyTo: '$DEFAULT_REPLYTO', mimeType: 'text/html; charset=UTF-8', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}', postsendScript: '${DEFAULT_POSTSEND_SCRIPT}', presendScript: '${DEFAULT_PRESEND_SCRIPT}', recipientProviders: [developers(), requestor(),  upstreamDevelopers()]
                } else {
                    emailext from: EMAIL_FROM, to: '${DEFAULT_RECIPIENTS}; '+GROUP_EMAIL, replyTo: '$DEFAULT_REPLYTO', mimeType: 'text/html; charset=UTF-8', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}', postsendScript: '${DEFAULT_POSTSEND_SCRIPT}', presendScript: '${DEFAULT_PRESEND_SCRIPT}', recipientProviders: [developers(), requestor(),  upstreamDevelopers()]
                }
            }

        }
        failure {
            echo 'This will run only if failed'

            // Editable Email Notification
            script {
                if(IS_FEATURE_BRANCH) {
                    emailext from: EMAIL_FROM, to: '${DEFAULT_RECIPIENTS}', replyTo: '$DEFAULT_REPLYTO', mimeType: 'text/html; charset=UTF-8', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}', postsendScript: '${DEFAULT_POSTSEND_SCRIPT}', presendScript: '${DEFAULT_PRESEND_SCRIPT}', recipientProviders: [developers(), requestor(), brokenTestsSuspects(), brokenBuildSuspects(), upstreamDevelopers(), culprits()]
                } else {
                    emailext from: EMAIL_FROM, to: '${DEFAULT_RECIPIENTS}; '+GROUP_EMAIL, replyTo: '$DEFAULT_REPLYTO', mimeType: 'text/html; charset=UTF-8', subject: '${DEFAULT_SUBJECT}', body: '${DEFAULT_CONTENT}', postsendScript: '${DEFAULT_POSTSEND_SCRIPT}', presendScript: '${DEFAULT_PRESEND_SCRIPT}', recipientProviders: [developers(), requestor(), brokenTestsSuspects(), brokenBuildSuspects(), upstreamDevelopers(), culprits()]
                }
            }
            
        }
        unstable {
            echo 'This will run only if the run was marked as unstable'
        }
        changed {
            echo 'This will run only if the state of the Pipeline has changed'
            echo 'For example, if the Pipeline was previously failing but is now successful'
        }
    }

}
